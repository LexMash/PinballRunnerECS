//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Prototyping/Data/GameInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameInput"",
    ""maps"": [
        {
            ""name"": ""PCInput"",
            ""id"": ""c3f05ec2-5f0b-47d8-89c1-35f548657c10"",
            ""actions"": [
                {
                    ""name"": ""Push"",
                    ""type"": ""Button"",
                    ""id"": ""ead76edf-54ae-424f-a18a-4cccfe75a031"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dash"",
                    ""type"": ""Button"",
                    ""id"": ""e59be2d6-bb41-4e4a-b3ff-b62bb47240a8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""efed951f-4ba9-4c7e-9fc3-5ee91ce49a17"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Push"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f0d1a5ca-d420-4143-af6d-343cffeaa3e5"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""10068b18-796a-4855-aef0-944a6161501e"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Push"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cefcd8f4-d0e5-4c19-88c2-ec7922f098f5"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""PC"",
            ""bindingGroup"": ""PC"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": true,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // PCInput
        m_PCInput = asset.FindActionMap("PCInput", throwIfNotFound: true);
        m_PCInput_Push = m_PCInput.FindAction("Push", throwIfNotFound: true);
        m_PCInput_Dash = m_PCInput.FindAction("Dash", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PCInput
    private readonly InputActionMap m_PCInput;
    private IPCInputActions m_PCInputActionsCallbackInterface;
    private readonly InputAction m_PCInput_Push;
    private readonly InputAction m_PCInput_Dash;
    public struct PCInputActions
    {
        private @GameInput m_Wrapper;
        public PCInputActions(@GameInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Push => m_Wrapper.m_PCInput_Push;
        public InputAction @Dash => m_Wrapper.m_PCInput_Dash;
        public InputActionMap Get() { return m_Wrapper.m_PCInput; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PCInputActions set) { return set.Get(); }
        public void SetCallbacks(IPCInputActions instance)
        {
            if (m_Wrapper.m_PCInputActionsCallbackInterface != null)
            {
                @Push.started -= m_Wrapper.m_PCInputActionsCallbackInterface.OnPush;
                @Push.performed -= m_Wrapper.m_PCInputActionsCallbackInterface.OnPush;
                @Push.canceled -= m_Wrapper.m_PCInputActionsCallbackInterface.OnPush;
                @Dash.started -= m_Wrapper.m_PCInputActionsCallbackInterface.OnDash;
                @Dash.performed -= m_Wrapper.m_PCInputActionsCallbackInterface.OnDash;
                @Dash.canceled -= m_Wrapper.m_PCInputActionsCallbackInterface.OnDash;
            }
            m_Wrapper.m_PCInputActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Push.started += instance.OnPush;
                @Push.performed += instance.OnPush;
                @Push.canceled += instance.OnPush;
                @Dash.started += instance.OnDash;
                @Dash.performed += instance.OnDash;
                @Dash.canceled += instance.OnDash;
            }
        }
    }
    public PCInputActions @PCInput => new PCInputActions(this);
    private int m_PCSchemeIndex = -1;
    public InputControlScheme PCScheme
    {
        get
        {
            if (m_PCSchemeIndex == -1) m_PCSchemeIndex = asset.FindControlSchemeIndex("PC");
            return asset.controlSchemes[m_PCSchemeIndex];
        }
    }
    public interface IPCInputActions
    {
        void OnPush(InputAction.CallbackContext context);
        void OnDash(InputAction.CallbackContext context);
    }
}
